// Code generated by protoc-gen-go.
// source: snapshot.proto
// DO NOT EDIT!

package statepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Snapshot struct {
	NextNodeId uint64            `protobuf:"varint,1,opt,name=next_node_id,json=nextNodeId" json:"next_node_id,omitempty"`
	State      map[string]string `protobuf:"bytes,2,rep,name=state" json:"state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Peers      map[uint64]string `protobuf:"bytes,3,rep,name=peers" json:"peers,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Snapshot) GetNextNodeId() uint64 {
	if m != nil {
		return m.NextNodeId
	}
	return 0
}

func (m *Snapshot) GetState() map[string]string {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Snapshot) GetPeers() map[uint64]string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*Snapshot)(nil), "statepb.Snapshot")
}

func init() { proto.RegisterFile("snapshot.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xce, 0x4b, 0x2c,
	0x28, 0xce, 0xc8, 0x2f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x2e, 0x49, 0x2c,
	0x49, 0x2d, 0x48, 0x52, 0xea, 0x60, 0xe2, 0xe2, 0x08, 0x86, 0xca, 0x09, 0x29, 0x70, 0xf1, 0xe4,
	0xa5, 0x56, 0x94, 0xc4, 0xe7, 0xe5, 0xa7, 0xa4, 0xc6, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x04, 0x71, 0x81, 0xc4, 0xfc, 0xf2, 0x53, 0x52, 0x3d, 0x53, 0x84, 0x8c, 0xb8, 0x58, 0xc1,
	0x3a, 0x25, 0x98, 0x14, 0x98, 0x35, 0xb8, 0x8d, 0x64, 0xf4, 0xa0, 0xe6, 0xe8, 0xc1, 0xcc, 0xd0,
	0x0b, 0x06, 0x09, 0xb8, 0xe6, 0x95, 0x14, 0x55, 0x06, 0x41, 0x94, 0x82, 0xf4, 0x14, 0xa4, 0xa6,
	0x16, 0x15, 0x4b, 0x30, 0xe3, 0xd2, 0x13, 0x00, 0x92, 0x86, 0xea, 0x01, 0x2b, 0x95, 0xb2, 0xe0,
	0xe2, 0x42, 0x18, 0x24, 0x24, 0xc0, 0xc5, 0x9c, 0x9d, 0x5a, 0x09, 0x76, 0x0e, 0x67, 0x10, 0x88,
	0x29, 0x24, 0xc2, 0xc5, 0x5a, 0x96, 0x98, 0x53, 0x0a, 0x72, 0x07, 0x48, 0x0c, 0xc2, 0xb1, 0x62,
	0xb2, 0x60, 0x04, 0xe9, 0x44, 0x18, 0x87, 0xac, 0x93, 0x85, 0x80, 0xce, 0x24, 0x36, 0x70, 0xd0,
	0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x47, 0xef, 0xce, 0x46, 0x2c, 0x01, 0x00, 0x00,
}
